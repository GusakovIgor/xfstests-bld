#!/bin/bash
#
# kbuild -- covenience script for build kernels
#
# This script will build a kernel using an external build directory.
# To use it, create the directory ".git/kbuild" in the top-level of
# the kernel sources, and create a file .git/kbuild/config with the
# following contents:
#
# BLD_DIR=/build/ext4
# KERN_ARCH=x86_64
#
# This will deposit the object files into the /build/ext4 directory,
# and create the modules.tar.gz directory for use with kvm-xfstests
# and gce-xfstests.

# N=$(($(getconf _NPROCESSORS_ONLN) / 2))
N=$(($(getconf _NPROCESSORS_ONLN) * 1))
NO_ACTION=

if test ! -f MAINTAINERS ; then
    echo "Not at top-level of kernel source tree?" 1>&2
    exit 1
fi

MY_ARCH=$(uname -m)
case "$MY_ARCH" in
    x86_64)
	KERN_ARCH=x86_64
	MY_ARCH=x86_64
	;;
    aarch64)
	KERN_ARCH=arm64
	MY_ARCH=arm64
	;;
    *)
	echo "unknown architecture: $MY_ARCH"
	exit 1
	;;
esac

function set_arch () {
    KERN_ARCH=$1

    case "$KERN_ARCH" in
	arm64)
	    if test -n "$BLD_DIR_ARM64" ; then
		BLD_DIR=$BLD_DIR_ARM64
	    fi
	    if test "$MY_ARCH" != arm64 ; then
		CROSS_COMPILE=aarch64-linux-gnu-
	    fi
	    ;;
	i386)
	    if test -n "$BLD_DIR_32" ; then
		BLD_DIR=$BLD_DIR_32
	    elif test -n "$BLD_DIR_I386" ; then
		BLD_DIR=$BLD_DIR_I386
	    fi
	    if test -n "$KERN_ARCH_32" ; then
		KERN_ARCH=$KERN_ARCH_32
	    else
		KERN_ARCH=i386
	    fi
	    ;;
	x86_64)
	    if test -n "$BLD_DIR_X86_64" ; then
		BLD_DIR=$BLD_DIR_X86_64
	    fi
	    ;;
	*)
	    echo "unknown architecture: $KERN_ARCH"
	    exit 1
	    ;;
    esac
}

mkdir -p .git/kbuild
if test -f .git/kbuild/config ; then
    . .git/kbuild/config
elif test -f .git/kbuild.conf ; then
    . .git/kbuild.conf
    mv .git/kbuild.conf .git/kbuild/config
fi

while [ "$1" != "" ];
do
    case "$1" in
	--arch)
	    shift
	    set_arch $1
	    ;;
	--arm64)
	    set_arch arm64
	    ;;
	--dpkg)
	    DO_DPKG=yes
	    DPKG_EXPLICIT=yes
	    ;;
	--no-dpkg)
	    DO_DPKG=
	    DPKG_EXPLICIT=yes
	    ;;
	--get-build-dir)
	    DO_GET_BUILD_DIR=yes
	    ;;
	--i386|-32)
	    set_arch i386
	    ;;
	--no-action)
	    NO_ACTION=echo
	    ;;

	-*)
	    echo "unknown option: $1"
	    exit 1
	    ;;
	*)
	    break
    esac
    shift
done

if test -n "$1" -a -z "$DPKG_EXPLICIT" ; then
    DO_DPKG=
fi

if test -n "$DO_GET_BUILD_DIR"; then
    if test -z "$BLD_DIR" ; then
	BLD_DIR=.
    fi
    echo $BLD_DIR
    exit 0
fi

if test -n "$BLD_DIR" -a ! -d "$BLD_DIR" ; then
    mkdir -p "$BLD_DIR"
    if test -f .git/kbuild/kernel-config ; then
	cp .git/kbuild/kernel-config "$BLD_DIR/.config"
    fi
    for i in x509.genkey signing_key.pem signing_key.x509
    do
	if test -f ".git/kbuild/$i" ; then
	    mkdir -p "$BLD_DIR/certs"
	    cp ".git/kbuild/$i" "$BLD_DIR/certs"
	fi
    done
fi

MAKE_ARGS=("ARCH=${KERN_ARCH:-x86_64}" "-j$N")
if test -n "$BLD_DIR" ; then
    MAKE_ARGS+=("O=$BLD_DIR")
else
    BLD_DIR="."
fi
if test -n "$CROSS_COMPILE" ; then
    MAKE_ARGS+=("CROSS_COMPILE=$CROSS_COMPILE")
fi

if grep -q CONFIG_CC_IS_CLANG=y "$BLD_DIR/.config" 2>/dev/null ; then
    MAKE_ARGS+=("CC=clang")
fi

rm -f "$BLD_DIR/linux-image.deb" "$BLD_DIR/linux-image-dbg.deb" \
   "$BLD_DIR/linux-headers.deb" "$BLD_DIR/linux-libc-dev.deb"

if test -n "$DO_DPKG" ; then
    $NO_ACTION make "${MAKE_ARGS[@]}" prepare
    REL=$(make "${MAKE_ARGS[@]}" kernelrelease | grep -v ^make)
    $NO_ACTION time nice make "KDEB_SOURCENAME=linux-${REL}" "${MAKE_ARGS[@]}" \
	 bindeb-pkg "$@"
    err=$?
    d="$BLD_DIR/.."
    if test -f "$BLD_DIR/debian/arch" ; then
	arch=$(cat $BLD_DIR/debian/arch)
    else
	arch=$(dpkg-architecture -q DEB_TARGET_ARCH)
    fi
    NUM=$(cd $d ; /bin/ls -t linux-${REL}_${REL}*.changes | head -1 | \
	       sed -e "s/linux-${REL}_${REL}-//" -e "s/_${arch}.changes//")
    v="${REL}-${NUM}_${arch}"
    if test -f "$d/linux-image-${REL}_${v}.deb" ; then
	$NO_ACTION mv "$d/linux-image-${REL}_${v}.deb" "$BLD_DIR/linux-image.deb"
    fi
    if test -f "$d/linux-image-${REL}-dbg_${v}.deb" ; then
	$NO_ACTION mv "$d/linux-image-${REL}-dbg_${v}.deb" "$BLD_DIR/linux-image-dbg.deb"
    fi
    if test -f "$d/linux-headers-${REL}_${v}.deb" ; then
	$NO_ACTION mv "$d/linux-headers-${REL}_${v}.deb" "$BLD_DIR/linux-headers.deb"
    fi
    if test -f "$d/linux-libc-dev_${v}.deb" ; then
	$NO_ACTION mv "$d/linux-libc-dev_${v}.deb" "$BLD_DIR/linux-libc-dev.deb"
    fi
    $NO_ACTION rm -f "$d/linux-${REL}_${v}.buildinfo" "$d/linux-${REL}_${v}.changes"
else
    $NO_ACTION time nice make "${MAKE_ARGS[@]}" "$@"
    err=$?
fi

if test -z "$*" -a "$err" == 0 && \
	grep -q CONFIG_MODULES=y $BLD_DIR/.config ; then
    TMPMODDIR=$(mktemp --tmpdir -d kbuild-modules.XXXXXXXX)
    echo "Generating $BLD_DIR/modules.tar.xz"
    $NO_ACTION make "${MAKE_ARGS[@]}" modules_install INSTALL_MOD_PATH="$TMPMODDIR" > /dev/null
    $NO_ACTION tar -C "$TMPMODDIR" -c --owner=0 --group=0 --numeric-owner \
	--mode=go+u-w -f - lib/modules | xz > "$BLD_DIR/modules.tar.xz"
    $NO_ACTION rm -rf "$TMPMODDIR"
else
    $NO_ACTION rm -f "$BLD_DIR/modules.tar.xz"
fi

$NO_ACTION cp "$BLD_DIR/.config" .git/kbuild/kernel-config
for i in x509.genkey signing_key.pem signing_key.x509
do
    if test -f "$BLD_DIR/certs/$i" ; then
	$NO_ACTION cp "$BLD_DIR/certs/$i" .git/kbuild
    fi
done

exit $err
